import requests
from bs4 import BeautifulSoup
import datetime
import time
import sys
import urllib3
import re
import json
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('energy_bot.log')
    ]
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
MAIN_URL = 'https://www.yakutskenergo.ru/press/news/news-remont/'
CHECK_TIMES = ["09:30", "17:30"]
TELEGRAM_BOT_TOKEN = '7501069858:AAG4I7n-Tmr9-DiLEAza8rTecKJdfcgaDe4'
USER_DATA_FILE = 'user_addresses.json'
USER_STATES_FILE = 'user_states.json'
CACHE_FILE = 'last_results.json'
LAST_CHECK_FILE = 'last_check_time.json'

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ update_id
last_update_id = 0

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_data: {e}")
            return {}
    return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

def load_user_states():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if os.path.exists(USER_STATES_FILE):
        try:
            with open(USER_STATES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_states: {e}")
            return {}
    return {}

def save_user_states(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(USER_STATES_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_states: {e}")

def load_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cache: {e}")
            return {}
    return {}

def save_cache(cache_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        with open(CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(cache_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cache: {e}")

def load_last_check_time():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    if os.path.exists(LAST_CHECK_FILE):
        try:
            with open(LAST_CHECK_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ last_check: {e}")
            return {}
    return {}

def save_last_check_time(check_time):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        with open(LAST_CHECK_FILE, 'w', encoding='utf-8') as f:
            json.dump(check_time, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è last_check: {e}")

def get_user_addresses(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    return user_data.get(str(chat_id), [])

def set_user_addresses(chat_id, addresses):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    user_data[str(chat_id)] = addresses
    save_user_data(user_data)

def get_user_state(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    states = load_user_states()
    return states.get(str(chat_id), 'idle')

def set_user_state(chat_id, state):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    states = load_user_states()
    states[str(chat_id)] = state
    save_user_states(states)

def send_telegram_message(chat_id, message, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        if reply_markup:
            payload['reply_markup'] = reply_markup
            
        response = requests.post(url, data=payload, timeout=10)
        return response.status_code == 200
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = {
        'keyboard': [
            ['üìã –ú–æ–∏ –∞–¥—Ä–µ—Å–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å'],
            ['‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å', 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ'],
            ['üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', 'üìä –°—Ç–∞—Ç—É—Å'],
            ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ],
        'resize_keyboard': True,
        'one_time_keyboard': False
    }
    return json.dumps(keyboard)

def create_cancel_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ–Ω–æ–π"""
    keyboard = {
        'keyboard': [
            ['‚ùå –û—Ç–º–µ–Ω–∞']
        ],
        'resize_keyboard': True,
        'one_time_keyboard': False
    }
    return json.dumps(keyboard)

def create_remove_keyboard(addresses):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤"""
    buttons = []
    for address in addresses:
        buttons.append([f'‚ùå {address}'])
    buttons.append(['‚ùå –û—Ç–º–µ–Ω–∞'])
    
    keyboard = {
        'keyboard': buttons,
        'resize_keyboard': True,
        'one_time_keyboard': False
    }
    return json.dumps(keyboard)

def remove_keyboard():
    """–£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return json.dumps({'remove_keyboard': True})

def get_page(url):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è PythonAnywhere
        session = requests.Session()
        session.trust_env = False
        
        response = session.get(url, verify=False, headers=headers, timeout=15)
        response.encoding = 'utf-8'
        return response.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–∞–π—Ç—É {url}: {e}")
        return None

def handle_message(chat_id, text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_addresses = get_user_addresses(chat_id)
    user_state = get_user_state(chat_id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if text == '‚ùå –û—Ç–º–µ–Ω–∞':
        set_user_state(chat_id, 'idle')
        send_telegram_message(chat_id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", create_main_keyboard())
        return
        
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if user_state == 'adding_address':
        if len(text) > 100:
            send_telegram_message(chat_id, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 100 —Å–∏–º–≤–æ–ª–æ–≤.", create_main_keyboard())
            set_user_state(chat_id, 'idle')
            return
            
        new_address = text.strip()
        if new_address in user_addresses:
            send_telegram_message(chat_id, f"‚ùå –ê–¥—Ä–µ—Å <code>{new_address}</code> —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", create_main_keyboard())
        else:
            user_addresses.append(new_address)
            set_user_addresses(chat_id, user_addresses)
            send_telegram_message(chat_id, f"‚úÖ –ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω: <code>{new_address}</code>\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å.", create_main_keyboard())
        set_user_state(chat_id, 'idle')
        
    elif user_state == 'removing_address':
        if text.startswith('‚ùå '):
            address_to_remove = text[2:]
            
            if address_to_remove in user_addresses:
                user_addresses.remove(address_to_remove)
                set_user_addresses(chat_id, user_addresses)
                send_telegram_message(chat_id, f"‚úÖ –ê–¥—Ä–µ—Å <code>{address_to_remove}</code> —É–¥–∞–ª–µ–Ω.", create_main_keyboard())
            else:
                send_telegram_message(chat_id, "‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.", create_main_keyboard())
            set_user_state(chat_id, 'idle')
        
    elif text == '/start' or text == 'üöÄ Start':
        welcome_message = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞!</b>\n\n"
            "–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ —Å–∞–π—Ç–µ yakutskenergo.ru "
            "–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞–π–¥—É –≤–∞—à–∏ –∞–¥—Ä–µ—Å–∞.\n\n"
            "üìù <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å\n"
            "‚Ä¢ –Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≥—Ä–∞—Ñ–∏–∫ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (9:30 –∏ 17:30)\n"
            "‚Ä¢ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
            "‚ö° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>"
        )
        send_telegram_message(chat_id, welcome_message, create_main_keyboard())
        
    elif text == 'üìã –ú–æ–∏ –∞–¥—Ä–µ—Å–∞':
        if user_addresses:
            addresses_text = "\n".join([f"‚Ä¢ {addr}" for addr in user_addresses])
            message = f"üìã <b>–í–∞—à–∏ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b>\n\n{addresses_text}"
        else:
            message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å¬ª —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞."
        send_telegram_message(chat_id, message, create_main_keyboard())
        
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å':
        message = (
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞</b>\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.\n\n"
            "üìå <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "<code>—É–ª. –õ–µ–≤–∞–Ω–µ–≤—Å–∫–æ–≥–æ</code>\n"
            "<code>–ß–µ–ª—é—Å–∫–∏–Ω–∞</code>\n"
            "<code>–ø—Ä. –õ–µ–Ω–∏–Ω–∞, 15</code>\n\n"
            "‚ÑπÔ∏è –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ.\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª"
        )
        send_telegram_message(chat_id, message, create_cancel_keyboard())
        set_user_state(chat_id, 'adding_address')
        
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å':
        if user_addresses:
            send_telegram_message(chat_id, "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", create_remove_keyboard(user_addresses))
            set_user_state(chat_id, 'removing_address')
        else:
            send_telegram_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", create_main_keyboard())
        
    elif text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ':
        set_user_addresses(chat_id, [])
        send_telegram_message(chat_id, "‚úÖ –í—Å–µ –∞–¥—Ä–µ—Å–∞ —É–¥–∞–ª–µ–Ω—ã.", create_main_keyboard())
        
    elif text == 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å':
        if user_addresses:
            message = "üîç <b>–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...</b>\n\n–ü—Ä–æ–≤–µ—Ä—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –∏ –ø—Ä–∏—à–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
            send_telegram_message(chat_id, message, remove_keyboard())
            check_news_for_user(chat_id, user_addresses, force_notify=True)
        else:
            message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
            send_telegram_message(chat_id, message, create_main_keyboard())
            
    elif text == 'üìä –°—Ç–∞—Ç—É—Å':
        status_message = (
            "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            f"üïê –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üîß –†–µ–∂–∏–º: –°–µ—Ä–≤–µ—Ä–Ω—ã–π\n"
            f"‚è∞ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: 9:30 –∏ 17:30\n"
            f"üì° –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω 24/7\n\n"
            f"üìã –í–∞—à–∏—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(user_addresses)}"
        )
        send_telegram_message(chat_id, status_message, create_main_keyboard())
            
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        help_message = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            "‚ö° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "2. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å\n"
            "3. –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
            "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ <b>üìã –ú–æ–∏ –∞–¥—Ä–µ—Å–∞</b> - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞\n"
            "‚Ä¢ <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å</b> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å\n"
            "‚Ä¢ <b>‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å</b> - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥—Ä–µ—Å\n"
            "‚Ä¢ <b>üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</b> - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞\n"
            "‚Ä¢ <b>üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å</b> - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
            "‚Ä¢ <b>üìä –°—Ç–∞—Ç—É—Å</b> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
            "üìå <b>–§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–æ–≤:</b>\n"
            "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>—É–ª. –õ–µ–≤–∞–Ω–µ–≤—Å–∫–æ–≥–æ</code>\n"
            "<code>–ß–µ–ª—é—Å–∫–∏–Ω–∞</code>\n"
            "<code>–ø—Ä. –õ–µ–Ω–∏–Ω–∞, 15</code>\n\n"
            "‚è∞ <b>–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞:</b> 9:30 –∏ 17:30 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
        )
        send_telegram_message(chat_id, help_message, create_main_keyboard())
        
    else:
        send_telegram_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ ‚Üì", create_main_keyboard())

def process_updates():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global last_update_id
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
        params = {'timeout': 30, 'offset': last_update_id + 1}
        response = requests.get(url, params=params, timeout=35)
        
        if response.status_code == 200:
            data = response.json()
            if data['ok'] and data['result']:
                for update in data['result']:
                    if 'message' in update and 'text' in update['message']:
                        chat_id = update['message']['chat']['id']
                        text = update['message']['text']
                        logging.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
                        handle_message(chat_id, text)
                    
                    last_update_id = max(last_update_id, update['update_id'])
                    
    except requests.exceptions.RequestException as e:
        logging.warning(f"üì° –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        time.sleep(10)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ updates: {e}")
        time.sleep(5)

def get_yesterdays_news_link(html):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—á–µ—Ä–∞—à–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å"""
    soup = BeautifulSoup(html, 'html.parser')
    
    yesterday = datetime.datetime.now() - datetime.timedelta(days=1)
    yesterday_day = yesterday.day
    month_names = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    yesterday_month = month_names[yesterday.month]
    
    all_links = soup.find_all('a', href=True)
    
    for link in all_links:
        href = link['href']
        link_text = link.get_text(strip=True)
        
        if (str(yesterday_day) in link_text and yesterday_month in link_text):
            if href.startswith('/'):
                full_url = 'https://www.yakutskenergo.ru' + href
            else:
                full_url = href
            
            return {'url': full_url, 'title': link_text}
    
    for link in all_links:
        href = link['href']
        if href and '/press/news/' in href and href.endswith('/'):
            full_url = 'https://www.yakutskenergo.ru' + href if href.startswith('/') else href
            return {'url': full_url, 'title': link.get_text(strip=True)}
    
    return None

def parse_news_with_dates(html, user_addresses):
    """–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∏—â–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    soup = BeautifulSoup(html, 'html.parser')
    results = []
    
    page_text = soup.get_text()
    lines = page_text.split('\n')
    
    logging.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    
    current_date = None
    found_records = set()
    
    for i, line in enumerate(lines):
        line_clean = line.strip()
        if not line_clean:
            continue
        
        date_match = re.search(r'(\d{1,2}\s+[–∞-—è]+)\s*$', line_clean.lower())
        if date_match:
            current_date = date_match.group(1).title()
            continue
        
        if re.search(r'\d{1,2}:\d{2}', line_clean):
            if any(city in line_clean for city in ['–ù—é—Ä–±–∞', '–í–µ—Ä—Ö–Ω–µ–≤–∏–ª—é–π—Å–∫', '–£–ª—É—Å', '—Ä–∞–π–æ–Ω']):
                continue
            
            line_lower = line_clean.lower()
            
            for address in user_addresses:
                search_address = address.lower()
                
                search_variants = [
                    search_address,
                    search_address.replace('—Å–∫–æ–≥–æ', '—Å–∫–∞—è'),
                    search_address.replace('–∞—è', '–æ–≥–æ'),
                    search_address + ' ',
                    ' ' + search_address,
                    search_address.replace(' ', '')
                ]
                
                for variant in search_variants:
                    if variant in line_lower and len(variant) > 3:
                        record_id = f"{current_date}_{address}_{line_clean[:50]}"
                        
                        if record_id not in found_records:
                            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å '{address}' –≤ —Å—Ç—Ä–æ–∫–µ: {line_clean}")
                            results.append({
                                'date': current_date or '–≥. –Ø–∫—É—Ç—Å–∫',
                                'address': address,
                                'full_text': line_clean,
                                'time': extract_time_from_line(line_clean)
                            })
                            found_records.add(record_id)
                        break
                else:
                    continue
                break
    
    logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(results)} –∑–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ")
    return results

def extract_time_from_line(line):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    time_pattern = r'(\d{1,2}:\d{2})\s*[-‚Äì]\s*(\d{1,2}:\d{2})'
    match = re.search(time_pattern, line)
    if match:
        return f"{match.group(1)}-{match.group(2)}"
    
    single_time_pattern = r'(\d{1,2}:\d{2})'
    match = re.search(single_time_pattern, line)
    if match:
        return match.group(1)
    
    return "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

def check_news_for_user(chat_id, user_addresses, force_notify=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user_addresses:
        if force_notify:
            send_telegram_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", create_main_keyboard())
        return None

    logging.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    try:
        main_html = get_page(MAIN_URL)
        if not main_html:
            if force_notify:
                send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–π.", create_main_keyboard())
            return None

        news_link = get_yesterdays_news_link(main_html)
        if not news_link:
            if force_notify:
                send_telegram_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ —Å–∞–π—Ç–µ.", create_main_keyboard())
            return None
        
        logging.info(f"üì∞ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {news_link['title']}")
        
        news_html = get_page(news_link['url'])
        if not news_html:
            if force_notify:
                send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π.", create_main_keyboard())
            return None
        
        parsed_data = parse_news_with_dates(news_html, user_addresses)
        logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(parsed_data)} –∑–∞–ø–∏—Å–µ–π —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è–º–∏")
        
        cache = load_cache()
        cache_key = f"{chat_id}_{news_link['url']}"
        
        previous_result = cache.get(cache_key, {})
        current_has_outages = len(parsed_data) > 0
        previous_has_outages = previous_result.get('has_outages', False)
        
        if not force_notify and current_has_outages == previous_has_outages:
            logging.info("‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
            return parsed_data
        
        if parsed_data:
            message = f"‚ö†Ô∏è <b>–ù–ê–ô–î–ï–ù–´ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø –í –Ø–ö–£–¢–°–ö–ï!</b> ‚ö†Ô∏è\n\n"
            message += f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {news_link['url']}\n\n"
            
            grouped_by_date = {}
            seen_records = set()
            
            for record in parsed_data:
                record_key = f"{record['date']}_{record['address']}_{record['time']}_{record['full_text'][:30]}"
                if record_key not in seen_records:
                    if record['date'] not in grouped_by_date:
                        grouped_by_date[record['date']] = []
                    grouped_by_date[record['date']].append(record)
                    seen_records.add(record_key)
            
            for date, records in grouped_by_date.items():
                message += f"üìÖ <b>{date}</b>\n"
                
                for record in records:
                    short_text = record['full_text']
                    if len(short_text) > 100:
                        short_text = short_text[:100] + "..."
                    message += f"üìç <b>{record['address']}</b>\n"
                    message += f"üïê <b>–í—Ä–µ–º—è:</b> {record['time']}\n"
                    message += f"üìã {short_text}\n"
                    message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                
                message += "\n"
            
            send_telegram_message(chat_id, message, create_main_keyboard())
            
            cache[cache_key] = {
                'has_outages': True,
                'timestamp': datetime.datetime.now().isoformat(),
                'news_url': news_link['url']
            }
            save_cache(cache)
            
        else:
            if force_notify:
                message = (
                    "‚úÖ <b>–û–¢–ö–õ–Æ–ß–ï–ù–ò–ô –í –Ø–ö–£–¢–°–ö–ï –ù–ï –ù–ê–ô–î–ï–ù–û</b>\n\n"
                    f"<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:</b>\n"
                    + "\n".join([f"‚Ä¢ {addr}" for addr in user_addresses]) + 
                    f"\n\n<b>–°—Å—ã–ª–∫–∞:</b> {news_link['url']}\n\n"
                    "‚ö° –û—Ç–∫–ª—é—á–µ–Ω–∏–π –ø–æ –≤–∞—à–∏–º –∞–¥—Ä–µ—Å–∞–º –≤ –Ø–∫—É—Ç—Å–∫–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç!"
                )
                send_telegram_message(chat_id, message, create_main_keyboard())
            
            cache[cache_key] = {
                'has_outages': False,
                'timestamp': datetime.datetime.now().isoformat(),
                'news_url': news_link['url']
            }
            save_cache(cache)
            
        return parsed_data
            
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        if force_notify:
            send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", create_main_keyboard())
        return None

def check_news_for_all_users():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"""
    user_data = load_user_data()
    last_check_time = load_last_check_time()
    current_time = datetime.datetime.now().isoformat()
    
    logging.info(f"{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    for chat_id, addresses in user_data.items():
        if addresses:
            logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}...")
            check_news_for_user(chat_id, addresses, force_notify=False)
            time.sleep(1)
    
    last_check_time['last_auto_check'] = current_time
    save_last_check_time(last_check_time)

def main():
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(USER_DATA_FILE):
        save_user_data({})
    if not os.path.exists(USER_STATES_FILE):
        save_user_states({})
    if not os.path.exists(CACHE_FILE):
        save_cache({})
    if not os.path.exists(LAST_CHECK_FILE):
        save_last_check_time({})
    
    last_check_time = None
    
    while True:
        try:
            process_updates()
            
            current_time = datetime.datetime.now().strftime("%H:%M")
            if current_time in CHECK_TIMES and current_time != last_check_time:
                logging.info(f"‚è∞ –í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}")
                check_news_for_all_users()
                last_check_time = current_time
            
            time.sleep(2)
            
        except KeyboardInterrupt:
            logging.info("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(10)

if __name__ == "__main__":
    main()